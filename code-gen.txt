using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            var s1 = "";
            if (args.Length > 0)
                s1 = args[0];


            var file = System.Diagnostics.Process.GetCurrentProcess().ProcessName;

            if (file.ToLower().Contains("mitra"))
            {
                Console.WriteLine("Please enter the app folder location : ");
                 s1 = Console.ReadLine();

                Console.WriteLine("Please enter the Component name : ");
                var s2 = Console.ReadLine();

                var dir = s1 + "\\" + s2;  // folder location

                if (!Directory.Exists(dir))
                { // if it doesn't exist, create
                    Directory.CreateDirectory(dir);
                    // use Path.Combine to combine 2 strings to a path
                    File.WriteAllText(Path.Combine(dir, s2.ToLower() + ".component.ts"), GetCompSyntax(s2));
                    File.WriteAllText(Path.Combine(dir, s2.ToLower() + ".Model.ts"), GetModelSyntax(s2));
                    File.WriteAllText(Path.Combine(dir, s2.ToLower() + ".module.ts"), getModuleSyntax(s2));
                    File.WriteAllText(Path.Combine(dir, s2.ToLower() + ".component.html"), "<div> this is "+ s2+" component view </div>");
                    File.WriteAllText(Path.Combine(dir, s2.ToLower() + ".routing.ts"), getRoutingSyntax(s2));
                }
                else
                {
                    Console.WriteLine("Already exist with same name in app");
                }
                Console.Read();
            }
            else
            {
                Console.WriteLine("Please rename your file with mitra-code-gen");
            }

        }

        private static string GetCompSyntax(string comp)
        {
            var append = "// This file is autogenerated using mitra-code-gen tool. Date :" + DateTime.Now.ToString("MM-dd-yyyy") + System.Environment.NewLine + System.Environment.NewLine;
            append = append + @"import { Component, OnInit } from '@angular/core'" + System.Environment.NewLine;

            append += System.Environment.NewLine + @"@Component({" + System.Environment.NewLine + "selector: '" + comp.ToLower() + "-comp" + "'," + System.Environment.NewLine + " templateUrl:'./" + comp.ToLower() + ".component.html'})";

            append += System.Environment.NewLine + "export class " + comp + "Component {}";

            return append;
        }

        private static string GetModelSyntax(string comp)
        {

            var append = "// This file is autogenerated using mitra-code-gen tool. Date :" + DateTime.Now.ToString("MM-dd-yyyy") + System.Environment.NewLine + System.Environment.NewLine;

            append += System.Environment.NewLine + @"export class " + comp + "Model {" + System.Environment.NewLine + "}";

            return append;
        }

        private static string getModuleSyntax(string comp)
        {

            var abc = "// This file is autogenerated using mitra-code-gen tool. Date :" + DateTime.Now.ToString("MM-dd-yyyy") + System.Environment.NewLine + System.Environment.NewLine;
            abc = abc + "import { CommonModule } from '@angular/common';" + System.Environment.NewLine;
            abc = abc + "import { routing } from './" + comp + ".routing';" + System.Environment.NewLine;
            abc = abc + "import { NgModule } from '@angular/core';" + System.Environment.NewLine + "import { AuthGuard } from 'app-common/auth/auth';" + System.Environment.NewLine;
            abc = abc + "import { " + comp + "Component } from './" + comp + ".component';" + System.Environment.NewLine + "@NgModule({" + System.Environment.NewLine + "declarations: [" + comp + "Component ]," + System.Environment.NewLine;
            abc = abc + "imports: [CommonModule, routing]," + System.Environment.NewLine + " providers: [AuthGuard]," + System.Environment.NewLine + "exports : [" + comp + "Component ]" + System.Environment.NewLine + "})";
            abc = abc + "export class " + comp + "Module { }";
            return abc;

        }

        private static string getRoutingSyntax(string comp)
        {
            var abc = "// This file is autogenerated using mitra-code-gen tool. Date :" + DateTime.Now.ToString("MM-dd-yyyy") + System.Environment.NewLine + System.Environment.NewLine;
            abc =abc+ "import { ModuleWithProviders } from '@angular/core'" + System.Environment.NewLine;
            abc = abc + "import { Routes, RouterModule } from '@angular/router';" + System.Environment.NewLine;
            abc = abc + "import { " + comp + "Component } from './" + comp + ".component';" + System.Environment.NewLine + "const routes: Routes = [" + System.Environment.NewLine;
            abc = abc + "{ path: '', component: " + comp + "Component }];" + System.Environment.NewLine;
            abc = abc + "export const routing: ModuleWithProviders = RouterModule.forChild(routes);";
            return abc;

        }
    }
}
